filter {
  if [type] =~ /^bro_/ {
    if [type] == "bro_conn" {
      csv {
          columns => ["ts","uid","id_orig_h","id_orig_p","id_resp_h","id_resp_p","proto","service","duration","orig_bytes","resp_bytes","conn_state","local_orig","local_resp","missed_bytes","history","orig_pkts","orig_ip_bytes","resp_pkts","resp_ip_bytes","tunnel_parents","orig_cc","resp_cc","sensorname"]
          separator => "	"
      }
      translate {
        field => "conn_state"
        destination => "conn_state_full"
        dictionary => [
          "S0", "Connection attempt seen, no reply",
          "S1", "Connection established, not terminated",
          "S2", "Connection established and close attempt by originator seen (but no reply from responder)",
          "S3", "Connection established and close attempt by responder seen (but no reply from originator)",
          "SF", "Normal SYN/FIN completion",
          "REJ", "Connection attempt rejected",
          "RSTO", "Connection established, originator aborted (sent a RST)",
          "RSTR", "Established, responder aborted",
          "RSTOS0", "Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder",
          "RSTRH", "Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator",
          "SH", "Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was 'half' open)",
          "SHR", "Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator",
          "OTH", "No SYN seen, just midstream traffic (a 'partial connection' that was not later closed)"
          ]
      }
        mutate {
            convert => [ "id_orig_p", "integer" ]
            convert => [ "id_resp_p", "integer" ]
            convert => [ "orig_bytes", "integer" ]
            convert => [ "duration", "float" ]
            convert => [ "resp_bytes", "integer" ]
            convert => [ "missed_bytes", "integer" ]
            convert => [ "orig_pkts", "integer" ]
            convert => [ "orig_ip_bytes", "integer" ]
            convert => [ "resp_pkts", "integer" ]
            convert => [ "resp_ip_bytes", "integer" ]
        }
    }
    if [type] == "bro_dns" {
      csv {
          columns => ["ts","uid","id_orig_h","id_orig_p","id_resp_h","id_resp_p","proto","trans_id","query","qclass","qclass_name","qtype","qtype_name","rcode","rcode_name","AA","TC","RD","RA","Z","answers","TTLs","rejected"]
          separator => "	"
      }
      mutate {
          convert => [ "id_orig_p", "integer" ]
          convert => [ "id_resp_p", "integer" ]
          convert => [ "trans_id", "integer" ]
          convert => [ "qclass", "integer" ]
          convert => [ "qtype", "integer" ]
          convert => [ "rcode", "integer" ]
      }
      ruby {
        code => "event['answers']=event['answers'].split(',')"
      }
    }
    if [type] == "bro_dpd" {
      csv {
        columns => ["ts","uid","id_orig_h","id_orig_p","id_resp_h","id_resp_p","proto","analyzer","failure_reason"]
        separator => "	"
        quote_char => ""
      }
      mutate {
          convert => [ "id_orig_p", "integer" ]
          convert => [ "id_resp_p", "integer" ]
      }
    }
    if [type] == "bro_ftp" {
      csv {
        columns => ["ts","uid","id","user","password","command","arg","mime_type","file_size","reply_code","reply_msg","data_channel","fuid"]
        separator => "	"
      }
    }
    if [type] == "bro_files" {
      csv {
        columns => ["ts","fuid","tx_hosts","rx_hosts","conn_uids","source","depth","analyzers","mime_type","filename","duration","local_orig","is_orig","seen_bytes","total_bytes","missing_bytes","overflow_bytes","timedout","parent_fuid","md5","sha1","sha256","extracted"]
        separator => "	"
      }
      mutate {
          convert => [ "duration", "float" ]
          convert => [ "depth", "integer" ]
          convert => [ "seen_bytes", "integer" ]
          convert => [ "total_bytes", "integer" ]
          convert => [ "missing_bytes", "integer" ]
          convert => [ "overflow_bytes", "integer" ]
      }
    }
    if [type] == "bro_http" {
      csv {
        columns => ["ts","uid","id_orig_h","id_orig_p","id_resp_h","id_resp_p","trans_depth","method","host","uri","referrer","user_agent","request_body_len","response_body_len","status_code","status_msg","info_code","info_msg","filename","http_tags","username","password","proxied","orig_fuids","orig_mime_types","resp_fuids","resp_mime_types"]
        separator => "	"
        quote_char => ""
      }
      mutate {
          convert => [ "id_orig_p", "integer" ]
          convert => [ "id_resp_p", "integer" ]
          convert => [ "trans_depth", "integer" ]
          convert => [ "request_body_len", "integer" ]
          convert => [ "response_body_len", "integer" ]
          convert => [ "status_code", "integer" ]
          convert => [ "info_code", "integer" ]        
      }
    if [type] == "bro_intel" {
      csv {
        columns => ["ts","uid","id","fuid","file_mime_type","file_desc","seen_indicator","seen_indicator_type","seen_where","sources"]
        separator => "	"
      }
    }
    if [type] == "bro_irc" {
      csv {
        columns => ["ts","uid","id","nick","user","command","value","addl","dcc_file_name","dcc_file_size","dcc_mime_type","fuid"]
        separator => "	"
      }
    }
    if [type] == "bro_notice" {
      csv {
        columns => ["ts","uid","id_orig_h","id_orig_p","id_resp_h","id_resp_p","fuid","file_mime_type","file_desc","proto","note","msg","sub","src","dst","p","n","peer_descr","actions","suppress_for","dropped","remote_location_country_code","remote_location_region","remote_location_city","remote_location_latitude","remote_location_longitude"]
        separator => "	"
      }
      mutate {
          convert => [ "id_orig_p", "integer" ]
          convert => [ "id_resp_p", "integer" ]
          convert => [ "p", "integer" ]
          convert => [ "n", "integer" ]
          convert => [ "suppress_for", "float" ]
      }
    }
    if [type] == "bro_pe" {
      csv {
        columns => ["ts","id","machine","compile_ts","os","subsystem","is_exe","is_64bit","uses_aslr","uses_dep","uses_code_integrity","uses_seh","has_import_table"]
        separator => "	"
      }
    }
    if [type] == "bro_radius" {
      csv {
        columns => ["ts","uid","id","username","mac","remote_ip","connect_info","result","logged"]
        separator => "	"
      }
    }
    if [type] == "bro_rdp" {
      csv {
        columns => ["ts","uid","id","cookie","result","security_protocol","keyboard_layout","client_build","client_name","client_dig_product_id","desktop_width","desktop_height","requested_color_depth","cert_type","cert_count","cert_permanent","encryption_level","encryption_method","analyzer_id","done","ssl"]
        separator => "	"
      }
    }
    if [type] == "bro_sip" {
      csv {
        columns => ["ts","uid","id","trans_depth","method","uri","date","request_from","request_to","response_from","response_to","reply_to","call_id","seq","subject","request_path","response_path","user_agent","status_code","status_msg","warning","request_body_len","response_body_len","content_type"]
        separator => "	"
      }
    }
    if [type] == "bro_smtp" {
      csv {
        columns => ["ts","uid","id","trans_depth","helo","mailfrom","rcptto","date","from","to","reply_to","msg_id","in_reply_to","subject","x_originating_ip","first_received","second_received","last_reply","path","user_agent","tls","process_received_from","has_client_activity","entity","fuids","is_webmail"]
        separator => "	"
      }
    }
    if [type] == "bro_snmp" {
      csv {
        columns => ["ts","uid","id","duration","version","community","get_requests","get_bulk_requests","get_responses","get_responses","set_requests","display_string","up_since"]
        separator => "	"
      }
    }
   if [type] == "bro_software" {
      csv {
        columns => ["ts","host","host_p","software_type","name","version","unparsed_version","force_log","url"]
        separator => "	"
      }
    }
   if [type] == "bro_ssh" {
      csv {
        columns => ["ts", "uid", "id", "version", "auth_success", "direction", "client", "server", "cipher_alg", "mac_alg", "compression_alg", "kex_alg", "host_key_alg", "host_key"]
        separator => "	"
      }
      mutate {
          convert => [ "id_orig_p", "integer" ]
          convert => [ "id_resp_p", "integer" ]
      }
    }
    if [type] == "bro_ssl" {
      csv {
        columns => ["ts","uid","id_orig_h","id_orig_p","id_resp_h","id_resp_p","version","cipher","curve","server_name","resumed","last_alert","next_protocol","established","cert_chain_fuids","client_cert_chain_fuids","subject","issuer","client_subject","client_issuer","validation_status"]
        separator => "	"
      }
      mutate {
          convert => [ "id_orig_p", "integer" ]
          convert => [ "id_resp_p", "integer" ]
      }
    }
    if [type] == "bro_tunnel" {
      csv {
        columns => ["ts","uid","id","tunnel_type","action"]
        separator => "	"
      }
    }
    if [type] == "bro_weird" {
      csv {
        columns => ["ts","uid","id_orig_h","id_orig_p","id_resp_h","id_resp_p","name","addl","notice","peer"]
        separator => "	"
      }
      mutate {
          convert => [ "id_orig_p", "integer" ]
          convert => [ "id_resp_p", "integer" ]
      }                
    }
    if [type] == "bro_x509" {
      csv {
        columns => ["ts","id","certificate_version","certificate_serial","certificate_subject","certificate_issuer","certificate_not_valid_before","certificate_not_valid_after","certificate_key_alg","certificate_sig_alg","certificate_key_type","certificate_key_length","certificate_exponent","certificate_curve","san_dns","san_uri","san_email","san_ip","basic_constraints_ca","basic_constraints_path_len"]
        separator => "	"
      }
    }

# the following are not currently tailed by beats config    
    
    if [type] == "bro_app_stats" {
      csv {
        columns => ["ts","ts_delta","app","uniq_hosts","hits","bytes"]
        separator => "	"
      }
    }
    if [type] == "bro_communication" {
      csv {
        columns => ["ts","peer","src_name","connected_peer_desc","connected_peer_addr","connected_peer_port","level","message"]
        separator => "	"
      }
    }
    if [type] == "bro_dhcp" {
      csv {
        columns => ["ts","uid","id_orig_h","id_orig_p","id_resp_h","id_resp_p","mac","assigned_ip","lease_time","trans_id"]
        separator => "	"
      }
      mutate {
          convert => [ "id_orig_p", "integer" ]
          convert => [ "id_resp_p", "integer" ]
      }                        
    }
    if [type] == "bro_dnp3" {
      csv {
        columns => ["ts","uid","id","fc_request","fc_reply","iin"]
        separator => "	"
      }
    }
    if [type] == "bro_known_certs" {
      csv {
        columns => ["ts","host","port_num","subject","issuer_subject","serial"]
        separator => "	"
      }
    }
    if [type] == "bro_known_hosts" {
      csv {
        columns => ["ts","host"]
        separator => "	"
      }
    }
    if [type] == "bro_known_services" {
      csv {
        columns => ["ts","host","port_num","port_proto","service"]
        separator => "	"
      }
    }
    if [type] == "bro_modbus" {
      csv {
        columns => ["ts","uid","id","func","exception"]
        separator => "	"
      }
    }
    if [type] == "bro_reporter" {
      csv {
        columns => ["ts","level","message","location"]
        separator => "	"
      }
    }
    if [type] == "bro_signatures" {
      csv {
        columns => ["ts","src_addr","src_port","dst_addr","dst_port","note","sig_id","event_msg","sub_msg","sig_count","host_count"]
        separator => "	"
      }
    }
    if [type] == "bro_socks" {
      csv {
        columns => ["ts","uid","id","version","user","password","status","request","request_p","bound","bound_p"]
        separator => "	"
      }
    }
    if [type] == "bro_traceroute" {
      csv {
        columns => ["ts","src","dst","proto"]
        separator => "	"
      }
    }
    date {
      match => [ "ts", "UNIX" ]
      add_tag => [ "tsmatch" ]
    }
  }
}
